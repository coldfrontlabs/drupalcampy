// @file
// Custom sass mixins
//
// Define the custom mixins for your project here.
// http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#defining_a_mixin

// Makes an element visually hidden, but accessible.
// @see http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
@mixin element-invisible {
  position: absolute !important;
  height: 1px;
  width: 1px;
  overflow: hidden;
  @if $legacy-support-for-ie6 or $legacy-support-for-ie7 {
    clip: rect(1px 1px 1px 1px); // IE6 and IE7 use the wrong syntax.
  }
  clip: rect(1px, 1px, 1px, 1px);
}

// Turns off the element-invisible effect.
@mixin element-invisible-off {
  position: static !important;
  clip: auto;
  height: auto;
  width: auto;
  overflow: auto;
}

// Resets margin and padding
@mixin zero{
   margin: 0;
   padding: 0;
 }

// Makes an element visually hidden by default, but visible when focused.
@mixin element-focusable {
  @include element-invisible;

  &:active,
  &:focus {
    @include element-invisible-off;
  }
}

// Anti Aliasing for light colors on dark backgrounds
 @mixin anti-aliasing{
   -webkit-font-smoothing: antialiased;
   -moz-osx-font-smoothing: grayscale;
 }

// Buttons
@mixin primary-btn {
  @include anti-aliasing;
  font-weight: bold;
  color: $white;
  padding: .5em 1.5em;
  border-radius: 3px;
  border: 1px solid $btn-blue-border;
  vertical-align: middle;
  background: $btn-dark-blue;
  @include ease(all, 150ms, ease-in-out);
  &:link, 
  &:visited{
    color: $white;
  }
  &:hover, 
  &:focus, 
  &:active{
    background: darken($btn-dark-blue, 10%);
  }
}

@mixin secondary-btn {
  color: $body-text;
  padding: .5em 1.5em;
  border-radius: 3px;
  background: $btn-light-grey;
  border: 1px solid $btn-grey-border;
  vertical-align: middle;
  @include ease(all, 150ms, ease-in-out);
  &:link, 
  &:visited{
    color: $body-text;
  }
  &:hover, 
  &:focus, 
  &:active{
    background: $btn-dark-grey;
  }
}

@mixin login-btn {
  @include anti-aliasing;
  background-color: $btn-light-blue;
  color: $white;
  padding: 1em 1.5em;
  border-radius: 0;
  border: 0;
}


// Hide text in an element
@mixin hide-text {
  text-indent: 100%;
  white-space: nowrap;
  overflow: hidden;
  display: block; // inline elements with this won't hide text unless set to block
}

@mixin show-text{
  text-indent: 0;
  white-space: normal;
  overflow: visible;
}


// Fallback for REM sizing
// http://css-tricks.com/snippets/css/less-mixin-for-rem-font-sizing/
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

@mixin rem-fallback($property, $values...) {
  $max: length($values);
  $pxValues: '';
  $remValues: '';

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $pxValues: #{$pxValues + $value*16}px;

    @if $i < $max {
      $pxValues: #{$pxValues + " "};
    }
  } 

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $remValues: #{$remValues + $value}rem;

    @if $i < $max {
      $remValues: #{$remValues + " "};
    }
  } 
  
  #{$property}: $pxValues; 
  #{$property}: $remValues; 
}

// SVG Fallback for BG Image
// Usage:
// @include vector-bg-with-fallback(nameofimage);
$public_path: "../";
@mixin vector-bg-with-fallback($name) {
  background-image: url('#{$public_path}images/#{$name}.png');
  background-image: none, url('#{$public_path}images/#{$name}.svg');
}


// Easing 
// Usage: 
// @include ease(all, 0.2s, ease-in-out);
@mixin ease($transition-property, $transition-time, $method) {
    -webkit-transition: $transition-property $transition-time $method;
    -moz-transition: $transition-property $transition-time $method;
    -ms-transition: $transition-property $transition-time $method;
    -o-transition: $transition-property $transition-time $method;
    transition: $transition-property $transition-time $method;
}

/**
 * For modern browsers
 * 1. The space content is one way to avoid an Opera bug when the
 *    contenteditable attribute is included anywhere else in the document.
 *    Otherwise it causes space to appear at the top and bottom of elements
 *    that are clearfixed.
 * 2. The use of `table` rather than `block` is only necessary if using
 *    `:before` to contain the top-margins of child elements.
 */
.cf:before,
.cf:after {
    content: " "; /* 1 */
    display: table; /* 2 */
}

.cf:after {
    clear: both;
}

/**
 * For IE 6/7 only
 * Include this rule to trigger hasLayout and contain floats.
 */
.cf {
    *zoom: 1;
}
